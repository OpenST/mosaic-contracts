
{
   "methods" : {
      "addCore(address,address)" : {
         "details" : "Takes _registry, _core; adds _core to _registry; only callable by adminAddress or opsAddress",
         "params" : {
            "_core" : "core",
            "_registry" : "registry"
         },
         "return" : "success bool"
      },
      "completeOwnershipTransfer()" : {
         "details" : "Sets proposedOwner to owner and proposedOwner to 0; only callable by proposedOwner; emits OwnershipTransferCompleted event",
         "return" : "success bool"
      },
      "confirmRedemptionIntent(address,bytes32,address,uint256,uint256,uint256,bytes32)" : {
         "details" : "Takes __registry, uuid, _redeemer, _redeemerNonce, _amountUT, _redemptionUnlockHeight, _redemptionIntentHash; confirms redemption intent with _registry; only callable by opsAddress",
         "params" : {
            "_amountUT" : "amountUT",
            "_redeemer" : "redeemer",
            "_redeemerNonce" : "redeemerNonce",
            "_redemptionIntentHash" : "redemptionIntentHash",
            "_redemptionUnlockHeight" : "redemptionUnlockHeight",
            "_registry" : "registry",
            "_uuid" : "uuid"
         },
         "return" : "amountST, expirationHeight"
      },
      "confirmStakingIntent(address,bytes32,address,uint256,address,uint256,uint256,uint256,bytes32)" : {
         "details" : "Takes _registry, _uuid, _staker, _stakerNonce, _beneficiary, _amountST, _amountUT, _stakingUnlockHeight, _stakingIntentHash; confirms staking intent with _registry; only callable by opsAddress",
         "params" : {
            "_amountST" : "amountST",
            "_amountUT" : "amountUT",
            "_beneficiary" : "beneficiary",
            "_registry" : "registry",
            "_staker" : "staker",
            "_stakerNonce" : "stakerNonce",
            "_stakingIntentHash" : "stakingIntentHash",
            "_stakingUnlockHeight" : "stakingUnlockHeight",
            "_uuid" : "uuid"
         },
         "return" : "expirationHeight"
      },
      "initiateOwnershipTransfer(address)" : {
         "details" : "Takes _proposedOwner; sets proposedOwner to _proposedOwner; only callable by owner; emits OwnershipTransferInitiated event",
         "params" : {
            "_proposedOwner" : "proposedOwner"
         },
         "return" : "success bool"
      },
      "processRedeeming(address,bytes32)" : {
         "details" : "Takes _registry, _redemptionIntentHash; processes corresponding redemption with _registry; only callable by adminAddress",
         "params" : {
            "_redemptionIntentHash" : "redemptionIntentHash",
            "_registry" : "registry"
         },
         "return" : "tokenAddress"
      },
      "processStaking(address,bytes32)" : {
         "details" : "Takes _registry, _stakingIntentHash; processes stake with _registry; only callable by adminAddress",
         "params" : {
            "_registry" : "registry",
            "_stakingIntentHash" : "stakingIntentHash"
         },
         "return" : "stakeAddress"
      },
      "registerBrandedToken(address,string,string,uint256,address,address,bytes32)" : {
         "details" : "Takes _registry, _symbol, _name, _conversionRate, _requester, _brandedToken, _checkUuid; registers a branded token with _registry; only callable by adminAddress or opsAddress",
         "params" : {
            "_brandedToken" : "brandedToken",
            "_checkUuid" : "checkUuid",
            "_conversionRate" : "conversionRate",
            "_name" : "name",
            "_registry" : "registry",
            "_requester" : "requester",
            "_symbol" : "symbol"
         },
         "return" : "registeredUuid"
      },
      "registerUtilityToken(address,string,string,uint256,uint256,address,bytes32)" : {
         "details" : "Takes _registry, _symbol, _name, _conversionRate, _chainIdUtility, _stakingAccount, _checkUuid; registers a utility token with _registry; only callable by adminAddress or opsAddress",
         "params" : {
            "_chainIdUtility" : "chainIdUtility",
            "_checkUuid" : "checkUuid",
            "_conversionRate" : "conversionRate",
            "_name" : "name",
            "_registry" : "registry",
            "_stakingAccount" : "stakingAccount",
            "_symbol" : "symbol"
         },
         "return" : "uuid"
      },
      "setAdminAddress(address)" : {
         "details" : "Takes _adminAddress; sets adminAddress to _adminAddress and returns true; only callable by owner or adminAddress; adminAddress can also be set to 0 to 'disable' it",
         "params" : {
            "_adminAddress" : "adminAddress"
         },
         "return" : "bool"
      },
      "setOpsAddress(address)" : {
         "details" : "Takes _opsAddress; sets opsAddress to _opsAddress and returns true; only callable by owner or adminAddress; _opsAddress can also be set to 0 to 'disable' it",
         "params" : {
            "_opsAddress" : "opsAddress"
         },
         "return" : "bool"
      }
   },
   "title" : "Registrar - Administers registrations for utility tokens"
}