
{
   "methods" : {
      "checkAvailability(bytes32,bytes32,address)" : {
         "details" : "Takes _hashSymbol, _hashName, _requester; checks whether branded token is available",
         "params" : {
            "_hashName" : "hashName",
            "_hashSymbol" : "hashSymbol",
            "_requester" : "requester"
         },
         "return" : "bool"
      },
      "completeOwnershipTransfer()" : {
         "details" : "Sets proposedOwner to owner and proposedOwner to 0; only callable by proposedOwner; emits OwnershipTransferCompleted event",
         "return" : "success bool"
      },
      "confirmStakingIntent(bytes32,address,uint256,address,uint256,uint256,uint256,bytes32)" : {
         "details" : "Takes _uuid, _staker, _stakerNonce, _beneficiary, _amountST, _amountUT, _stakingUnlockHeight, _stakingIntentHash; confirms staking intent; emits StakingIntentConfirmed event; only callable by registrar",
         "params" : {
            "_amountST" : "amountST",
            "_amountUT" : "amountUT",
            "_beneficiary" : "beneficiary",
            "_staker" : "staker",
            "_stakerNonce" : "stakerNonce",
            "_stakingIntentHash" : "stakingIntentHash",
            "_stakingUnlockHeight" : "stakingUnlockHeight",
            "_uuid" : "uuid"
         },
         "return" : "expirationHeight"
      },
      "hashRedemptionIntent(bytes32,address,uint256,uint256,uint256)" : {
         "details" : "Returns hash of _uuid, _account, _accountNonce, _amountUT, _escrowUnlockHeight",
         "params" : {
            "_account" : "account",
            "_accountNonce" : "accountNonce",
            "_amountUT" : "amountUT",
            "_escrowUnlockHeight" : "escrowUnlockHeight",
            "_uuid" : "uuid"
         },
         "return" : "bytes32"
      },
      "hashStakingIntent(bytes32,address,uint256,address,uint256,uint256,uint256)" : {
         "details" : "Returns hash of _uuid, _account, _accountNonce, _beneficiary, _amountST, _amountUT, _escrowUnlockHeight",
         "params" : {
            "_account" : "account",
            "_accountNonce" : "accountNonce",
            "_amountST" : "amountST",
            "_amountUT" : "amountUT",
            "_beneficiary" : "beneficiary",
            "_escrowUnlockHeight" : "escrowUnlockHeight",
            "_uuid" : "uuid"
         },
         "return" : "bytes32"
      },
      "hashUuid(string,string,uint256,uint256,address,uint256)" : {
         "details" : "Returns hash of _symbol, _name, _chainIdValue, _chainIdUtility, _openSTUtility, _conversionRate",
         "params" : {
            "_chainIdUtility" : "chainIdUtility",
            "_chainIdValue" : "chainIdValue",
            "_conversionRate" : "conversionRate",
            "_name" : "name",
            "_openSTUtility" : "openSTUtility",
            "_symbol" : "symbol"
         },
         "return" : "bytes32"
      },
      "initiateOwnershipTransfer(address)" : {
         "details" : "Takes _proposedOwner; sets proposedOwner to _proposedOwner; only callable by owner; emits OwnershipTransferInitiated event",
         "params" : {
            "_proposedOwner" : "proposedOwner"
         },
         "return" : "success bool"
      },
      "initiateProtocolTransfer(address,address)" : {
         "details" : "Takes _token, _proposedProtocol; initiates transfer to _proposedProtocol for _token; only callable by adminAddress",
         "params" : {
            "_proposedProtocol" : "proposedProtocol",
            "_token" : "token"
         },
         "return" : "success bool"
      },
      "processMinting(bytes32)" : {
         "details" : "Takes _stakingIntentHash; processes corresponding mint; emits ProcessedMint event",
         "params" : {
            "_stakingIntentHash" : "stakingIntentHash"
         },
         "return" : "tokenAddress"
      },
      "processRedeeming(bytes32)" : {
         "details" : "Takes _redemptionIntentHash; processes corresponding redemption; emits ProcessedRedemption event",
         "params" : {
            "_redemptionIntentHash" : "redemptionIntentHash"
         },
         "return" : "tokenAddress"
      },
      "proposeBrandedToken(string,string,uint256)" : {
         "details" : "Takes _symbol _name _conversionRate. Congratulations on looking under the hood and obtaining ST' to call proposeBrandedToken; however, OpenSTFoundation is not yet actively listening to these events because to automate it we will build a web UI where you can authenticate with your msg.sender = _requester key; until that time please drop us a line on partners(at)simpletoken.org and we can work with you to register your branded token",
         "params" : {
            "_conversionRate" : "conversionRate",
            "_name" : "name",
            "_symbol" : "symbol"
         },
         "return" : "btUuid"
      },
      "redeem(bytes32,uint256,uint256)" : {
         "details" : "Takes _uuid, _amountBT, _nonce; redeemer must set an allowance for the branded token with OpenSTUtility as the spender so that the branded token can be taken into escrow by OpenSTUtility; emits RedemptionIntentDeclared event. Note: for STPrime, call OpenSTUtility.redeemSTPrime as a payable function. Note: nonce must be queried from OpenSTValue contract",
         "params" : {
            "_amountBT" : "amountBT",
            "_nonce" : "nonce",
            "_uuid" : "uuid"
         },
         "return" : "unlockHeight, redemptionIntentHash"
      },
      "redeemSTPrime(uint256)" : {
         "details" : "Takes _nonce; redeemer must send as value the amount STP to redeem; emits RedemptionIntentDeclared event. Note: nonce must be queried from OpenSTValue contract",
         "params" : {
            "_nonce" : "nonce"
         },
         "return" : "amountSTP, unlockHeight, redemptionIntentHash"
      },
      "registerBrandedToken(string,string,uint256,address,address,bytes32)" : {
         "details" : "Takes _symbol, _name, _conversionRate, _requester, _brandedToken, _checkUuid; registers a branded token; emits RegisteredBrandedToken event; only callable by registrar",
         "params" : {
            "_brandedToken" : "brandedToken",
            "_checkUuid" : "checkUuid",
            "_conversionRate" : "conversionRate",
            "_name" : "name",
            "_requester" : "requester",
            "_symbol" : "symbol"
         },
         "return" : "registeredUuid"
      },
      "registeredTokenProperties(bytes32)" : {
         "params" : {
            "_uuid" : "uuid"
         },
         "return" : "token address, registrar address"
      },
      "revertMinting(bytes32)" : {
         "details" : "Takes _stakingIntentHash; reverts corresponding mint; emits RevertedMint event",
         "params" : {
            "_stakingIntentHash" : "stakingIntentHash"
         },
         "return" : "uuid, staker, beneficiary, amount"
      },
      "revertRedemption(bytes32)" : {
         "details" : "Takes _redemptionIntentHash; reverts corresponding redemption; emits RevertedRedemption event",
         "params" : {
            "_redemptionIntentHash" : "redemptionIntentHash"
         },
         "return" : "uuid, redeemer, amountUT"
      },
      "revokeProtocolTransfer(address)" : {
         "details" : "Takes _token; revokes protocol transfer; on the very first released version v0.9.1 there is no need to completeProtocolTransfer from a previous version; only callable by adminAddress",
         "params" : {
            "_token" : "token"
         },
         "return" : "success bool"
      },
      "setAdminAddress(address)" : {
         "details" : "Takes _adminAddress; sets adminAddress to _adminAddress and returns true; only callable by owner or adminAddress; adminAddress can also be set to 0 to 'disable' it",
         "params" : {
            "_adminAddress" : "adminAddress"
         },
         "return" : "bool"
      },
      "setOpsAddress(address)" : {
         "details" : "Takes _opsAddress; sets opsAddress to _opsAddress and returns true; only callable by owner or adminAddress; _opsAddress can also be set to 0 to 'disable' it",
         "params" : {
            "_opsAddress" : "opsAddress"
         },
         "return" : "bool"
      }
   },
   "title" : "OpenSTUtility - Protocol for a utility chain"
}