
{
   "methods" : {
      "addCore(address)" : {
         "details" : "Takes _core; adds _core to cores by core.chainIdRemote; only callable by registrar",
         "params" : {
            "_core" : "core"
         },
         "return" : "success bool"
      },
      "blocksToWaitLong()" : {
         "details" : "Returns BLOCKS_TO_WAIT_LONG",
         "return" : "uint256"
      },
      "blocksToWaitShort()" : {
         "details" : "Returns BLOCKS_TO_WAIT_SHORT",
         "return" : "uint256"
      },
      "completeOwnershipTransfer()" : {
         "details" : "Sets proposedOwner to owner and proposedOwner to 0; only callable by proposedOwner; emits OwnershipTransferCompleted event",
         "return" : "success bool"
      },
      "confirmRedemptionIntent(bytes32,address,uint256,uint256,uint256,bytes32)" : {
         "details" : "Takes _uuid, _redeemer, _redeemerNonce, _amountUT, _redemptionUnlockHeight, _redemptionIntentHash; confirms redemption intent; emits RedemptionIntentConfirmed event; only callable by registrar",
         "params" : {
            "_amountUT" : "amountUT",
            "_redeemer" : "redeemer",
            "_redeemerNonce" : "redeemerNonce",
            "_redemptionIntentHash" : "redemptionIntentHash",
            "_redemptionUnlockHeight" : "redemptionUnlockHeight",
            "_uuid" : "uuid"
         },
         "return" : "amountST, expirationHeight"
      },
      "core(uint256)" : {
         "details" : "Takes _chainIdUtility; returns core address",
         "return" : "address"
      },
      "getNextNonce(address)" : {
         "details" : "Takes _account; returns next nonce",
         "return" : "uint256"
      },
      "hashRedemptionIntent(bytes32,address,uint256,uint256,uint256)" : {
         "details" : "Returns hash of _uuid, _account, _accountNonce, _amountUT, _escrowUnlockHeight",
         "params" : {
            "_account" : "account",
            "_accountNonce" : "accountNonce",
            "_amountUT" : "amountUT",
            "_escrowUnlockHeight" : "escrowUnlockHeight",
            "_uuid" : "uuid"
         },
         "return" : "bytes32"
      },
      "hashStakingIntent(bytes32,address,uint256,address,uint256,uint256,uint256)" : {
         "details" : "Returns hash of _uuid, _account, _accountNonce, _beneficiary, _amountST, _amountUT, _escrowUnlockHeight",
         "params" : {
            "_account" : "account",
            "_accountNonce" : "accountNonce",
            "_amountST" : "amountST",
            "_amountUT" : "amountUT",
            "_beneficiary" : "beneficiary",
            "_escrowUnlockHeight" : "escrowUnlockHeight",
            "_uuid" : "uuid"
         },
         "return" : "bytes32"
      },
      "hashUuid(string,string,uint256,uint256,address,uint256)" : {
         "details" : "Returns hash of _symbol, _name, _chainIdValue, _chainIdUtility, _openSTUtility, _conversionRate",
         "params" : {
            "_chainIdUtility" : "chainIdUtility",
            "_chainIdValue" : "chainIdValue",
            "_conversionRate" : "conversionRate",
            "_name" : "name",
            "_openSTUtility" : "openSTUtility",
            "_symbol" : "symbol"
         },
         "return" : "bytes32"
      },
      "initiateOwnershipTransfer(address)" : {
         "details" : "Takes _proposedOwner; sets proposedOwner to _proposedOwner; only callable by owner; emits OwnershipTransferInitiated event",
         "params" : {
            "_proposedOwner" : "proposedOwner"
         },
         "return" : "success bool"
      },
      "initiateProtocolTransfer(address,address)" : {
         "details" : "Takes _simpleStake, _proposedProtocol; initiates transfer to _proposedProtocol for _simpleStake; only callable by adminAddress",
         "params" : {
            "_proposedProtocol" : "proposedProtocol",
            "_simpleStake" : "simpleStake"
         },
         "return" : "success bool"
      },
      "processStaking(bytes32)" : {
         "details" : "Takes _stakingIntentHash; processes corresponding stake; emits ProcessedStake event",
         "params" : {
            "_stakingIntentHash" : "stakingIntentHash"
         },
         "return" : "stakeAddress"
      },
      "processUnstaking(bytes32)" : {
         "details" : "Takes _redemptionIntentHash; processes corresponding unstake; emits ProcessedUnstake event",
         "params" : {
            "_redemptionIntentHash" : "redemptionIntentHash"
         },
         "return" : "stakeAddress"
      },
      "registerUtilityToken(string,string,uint256,uint256,address,bytes32)" : {
         "details" : "Takes _symbol, _name, _conversionRate, _chainIdUtility, _stakingAccount, _checkUuid; registers a utility token; emits UtilityTokenRegistered event; only callable by registrar",
         "params" : {
            "_chainIdUtility" : "chainIdUtility",
            "_checkUuid" : "checkUuid",
            "_conversionRate" : "conversionRate",
            "_name" : "name",
            "_stakingAccount" : "stakingAccount",
            "_symbol" : "symbol"
         },
         "return" : "uuid"
      },
      "revertStaking(bytes32)" : {
         "details" : "Takes _stakingIntentHash; reverts corresponding stake; emits RevertedStake event",
         "params" : {
            "_stakingIntentHash" : "stakingIntentHash"
         },
         "return" : "uuid, staker, amountST, staker"
      },
      "revertUnstaking(bytes32)" : {
         "details" : "Takes _redemptionIntentHash; reverts corresponding unstake; emits RevertedUnstake event",
         "params" : {
            "_redemptionIntentHash" : "redemptionIntentHash"
         },
         "return" : "uuid, redeemer, amountST"
      },
      "revokeProtocolTransfer(address)" : {
         "details" : "Takes _simpleStake; revokes protocol transfer; on the very first released version v0.9.1 there is no need to completeProtocolTransfer from a previous version; only callable by adminAddress",
         "params" : {
            "_simpleStake" : "simpleStake"
         },
         "return" : "success bool"
      },
      "setAdminAddress(address)" : {
         "details" : "Takes _adminAddress; sets adminAddress to _adminAddress and returns true; only callable by owner or adminAddress; adminAddress can also be set to 0 to 'disable' it",
         "params" : {
            "_adminAddress" : "adminAddress"
         },
         "return" : "bool"
      },
      "setOpsAddress(address)" : {
         "details" : "Takes _opsAddress; sets opsAddress to _opsAddress and returns true; only callable by owner or adminAddress; _opsAddress can also be set to 0 to 'disable' it",
         "params" : {
            "_opsAddress" : "opsAddress"
         },
         "return" : "bool"
      },
      "stake(bytes32,uint256,address)" : {
         "details" : "Takes _uuid, _amountST, _beneficiary; In order to stake the tx.origin needs to set an allowance for the OpenSTValue contract to transfer to itself to hold during the staking process.",
         "params" : {
            "_amountST" : "amountST",
            "_beneficiary" : "beneficiary",
            "_uuid" : "uuid"
         },
         "return" : "amountUT, nonce, unlockHeight, stakingIntentHash"
      },
      "utilityTokenProperties(bytes32)" : {
         "params" : {
            "_uuid" : "uuid"
         },
         "return" : "symbol, name, conversionRate, decimals, chainIdUtility, simpleStake, stakingAccount"
      }
   },
   "title" : "OpenSTValue - value staking contract for OpenST "
}