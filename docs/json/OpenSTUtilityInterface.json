
{
   "methods" : {
      "confirmStakingIntent(bytes32,address,uint256,address,uint256,uint256,uint256,bytes32)" : {
         "details" : "Takes _uuid _staker _stakerNonce _beneficiary _amountST _amountUT _stakingUnlockHeight _stakingIntentHash; confirms staking intent; emits StakingIntentConfirmed event",
         "params" : {
            "_amountST" : "amountST",
            "_amountUT" : "amountUT",
            "_beneficiary" : "beneficiary",
            "_staker" : "staker",
            "_stakerNonce" : "stakerNonce",
            "_stakingIntentHash" : "stakingIntentHash",
            "_stakingUnlockHeight" : "stakingUnlockHeight",
            "_uuid" : "uuid"
         },
         "return" : "expirationHeight"
      },
      "processRedeeming(bytes32)" : {
         "details" : "Takes _redemptionIntentHash; processes corresponding redemption; emits ProcessedRedemption event",
         "params" : {
            "_redemptionIntentHash" : "redemptionIntentHash"
         },
         "return" : "tokenAddress"
      },
      "registerBrandedToken(string,string,uint256,address,address,bytes32)" : {
         "details" : "Takes _symbol, _name, _conversionRate, _requester, _brandedToken, _checkUuid; registers a branded token; emits RegisteredBrandedToken event",
         "params" : {
            "_brandedToken" : "brandedToken",
            "_checkUuid" : "checkUuid",
            "_conversionRate" : "conversionRate",
            "_name" : "name",
            "_requester" : "requester",
            "_symbol" : "symbol"
         },
         "return" : "registeredUuid"
      }
   },
   "title" : "OpenSTUtilityInterface - Interface for OpenSTUtility"
}