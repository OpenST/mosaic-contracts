
{
   "methods" : {
      "allowance(address,address)" : {
         "details" : "Takes _owner, _spender; returns remaining allowance of _spender from _owner",
         "params" : {
            "_owner" : "owner",
            "_spender" : "spender"
         },
         "return" : "remaining"
      },
      "approve(address,uint256)" : {
         "details" : "Takes _spender, _value; approves _spender to transfer _value from msg.sender; emits Approval event",
         "params" : {
            "_spender" : "spender",
            "_value" : "value"
         },
         "return" : "success"
      },
      "balanceOf(address)" : {
         "details" : "Takes _owner; returns balance of _owner",
         "params" : {
            "_owner" : "owner"
         },
         "return" : "balance"
      },
      "burn(address,uint256)" : {
         "details" : "Takes _burner, _amount; calls burnEIP20 and returns the result of calling burnInternal; only callable by protocol",
         "params" : {
            "_amount" : "amount",
            "_burner" : "burner"
         },
         "return" : "bool"
      },
      "claim(address)" : {
         "details" : "Takes _beneficiary; calls claimInternal and returns the result of calling claimEIP20",
         "params" : {
            "_beneficiary" : "beneficiary"
         },
         "return" : "bool"
      },
      "completeProtocolTransfer()" : {
         "details" : "Only after the waiting period, can proposed protocol complete the transfer; emits ProtocolTransferCompleted event; only callable by proposed protocol",
         "return" : "success bool"
      },
      "decimals()" : {
         "details" : "Returns decimals",
         "return" : "uint8"
      },
      "initiateProtocolTransfer(address)" : {
         "details" : "Takes _proposedProtocol; initiates protocol transfer; emits ProtocolTransferInitiated event; only callable by protocol",
         "params" : {
            "_proposedProtocol" : "proposedProtocol"
         },
         "return" : "success bool"
      },
      "mint(address,uint256)" : {
         "details" : "Takes _beneficiary, _amount; calls mintEIP20 and returns the result of calling mintInternal; only callable by protocol",
         "params" : {
            "_amount" : "amount",
            "_beneficiary" : "beneficiary"
         },
         "return" : "bool"
      },
      "name()" : {
         "details" : "Returns name",
         "return" : "string"
      },
      "revokeProtocolTransfer()" : {
         "details" : "protocol can revoke initiated protocol transfer; emits ProtocolTransferRevoked event; only callable by protocol",
         "return" : "success bool"
      },
      "symbol()" : {
         "details" : "Returns symbol",
         "return" : "string"
      },
      "totalSupply()" : {
         "details" : "Get totalTokenSupply as view so that child cannot edit",
         "return" : "uint256"
      },
      "transfer(address,uint256)" : {
         "details" : "Takes _to, _value; transfers _value from balance of msg.sender to _to; emits Transfer event",
         "params" : {
            "_to" : "to",
            "_value" : "value"
         },
         "return" : "success"
      },
      "transferFrom(address,address,uint256)" : {
         "details" : "Takes _from, _to, _value; transfers _value from balance of _from to _to; emits Transfer event",
         "params" : {
            "_from" : "from",
            "_to" : "to",
            "_value" : "value"
         },
         "return" : "success"
      },
      "unclaimed(address)" : {
         "details" : "Takes _beneficiary; returns unclaimed amount for _beneficiary",
         "params" : {
            "_beneficiary" : "beneficiary"
         },
         "return" : "uint256"
      },
      "uuid()" : {
         "details" : "Returns uuid",
         "return" : "bytes32"
      }
   },
   "title" : "BrandedToken - An EIP20 token minted by staking Simple Token on Ethereum mainnet. Branded tokens are designed to be used within a (decentralised) application and support: smart contract controlled password reset for users who don't yet (hard-spoon FTW) manage their own private keys (+v0.9.2); soft-exit for a user to redeem their equivalent part of the Simple Token stake on Ethereum mainnet; hard-exit for all users if the utility chain halts to reclaim their equivalent part of the Simple Token stake on Ethereum (before v1.0)"
}