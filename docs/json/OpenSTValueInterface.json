
{
   "methods" : {
      "addCore(address)" : {
         "details" : "Takes _core; adds _core to cores by core.chainIdRemote",
         "params" : {
            "_core" : "core"
         },
         "return" : "success bool"
      },
      "confirmRedemptionIntent(bytes32,address,uint256,uint256,uint256,bytes32)" : {
         "details" : "Takes _uuid, _redeemer, _redeemerNonce, _amountUT, _redemptionUnlockHeight, _redemptionIntentHash; confirms redemption intent; emits RedemptionIntentConfirmed event",
         "params" : {
            "_amountUT" : "amountUT",
            "_redeemer" : "redeemer",
            "_redeemerNonce" : "redeemerNonce",
            "_redemptionIntentHash" : "redemptionIntentHash",
            "_redemptionUnlockHeight" : "redemptionUnlockHeight",
            "_uuid" : "uuid"
         },
         "return" : "amountST, expirationHeight"
      },
      "processStaking(bytes32)" : {
         "details" : "Takes _stakingIntentHash; processes corresponding stake; emits ProcessedStake event",
         "params" : {
            "_stakingIntentHash" : "stakingIntentHash"
         },
         "return" : "stakeAddress"
      },
      "registerUtilityToken(string,string,uint256,uint256,address,bytes32)" : {
         "details" : "Takes _symbol, _name, _conversionRate, _chainIdUtility, _stakingAccount, _checkUuid; registers a utility token; emits UtilityTokenRegistered event",
         "params" : {
            "_chainIdUtility" : "chainIdUtility",
            "_checkUuid" : "checkUuid",
            "_conversionRate" : "conversionRate",
            "_name" : "name",
            "_stakingAccount" : "stakingAccount",
            "_symbol" : "symbol"
         },
         "return" : "uuid"
      }
   },
   "title" : "OpenSTValueInterface - Interface for OpenSTValue"
}

